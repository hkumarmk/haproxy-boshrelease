<% require "digest"%>

global
    log <%= p('ha_proxy.syslog_server') %> syslog <%= p('ha_proxy.log_level') %>
    daemon
    <% if p("ha_proxy.threads") > 1 %>
    nbproc <%= p("ha_proxy.threads") %>
    <% end %>
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("ha_proxy.default_dh_param") %>
    tune.bufsize <%= p("ha_proxy.buffer_size_bytes") %>
    <% if p("ha_proxy.threads") > 1 %>
      <% 1.upto(p("ha_proxy.threads")) do |proc| %>
    stats socket /var/vcap/sys/run/haproxy/stats<%= proc%>.sock mode 600 level admin process <%= proc%>
      <% end %>
    <% else %>
    stats socket /var/vcap/sys/run/haproxy/stats.sock mode 600 level admin
    <% end %>
    stats timeout 2m
<%
    ssl_flags = "no-sslv3"
    if p("ha_proxy.disable_tls_10")
        ssl_flags = "#{ssl_flags} no-tlsv10"
    end
    if p("ha_proxy.disable_tls_11")
        ssl_flags = "#{ssl_flags} no-tlsv11"
    end
    if p("ha_proxy.disable_tls_tickets")
        ssl_flags = "#{ssl_flags} no-tls-tickets"
    end
-%>
    ssl-default-bind-options <%= ssl_flags %>
    ssl-default-bind-ciphers <%= p("ha_proxy.ssl_ciphers") %>
    ssl-default-server-options <%= ssl_flags %>
    ssl-default-server-ciphers <%= p("ha_proxy.ssl_ciphers") %>

defaults
    log global
    maxconn 64000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         <%= (p("ha_proxy.connect_timeout").to_f    * 1000).to_i %>ms
    timeout client          <%= (p("ha_proxy.client_timeout").to_f     * 1000).to_i %>ms
    timeout server          <%= (p("ha_proxy.server_timeout").to_f     * 1000).to_i %>ms
    timeout tunnel          <%= (p("ha_proxy.websocket_timeout").to_f  * 1000).to_i %>ms
    timeout http-keep-alive <%= (p("ha_proxy.keepalive_timeout").to_f  * 1000).to_i %>ms
    timeout http-request    <%= (p("ha_proxy.request_timeout").to_f    * 1000).to_i %>ms
    timeout queue           <%= (p("ha_proxy.queue_timeout").to_f      * 1000).to_i %>ms

<% if p("ha_proxy.stats_enable") %>
  <% stat = p("ha_proxy.stats_bind").split(':');
     stat_prefix = stat[0] + ":";
     stat_port = stat[1].to_i;
   %>
  <% 1.upto(p("ha_proxy.threads")) do |proc| %>
listen stats_<%= proc %>
    bind <%= stat_prefix %><%= stat_port + (proc - 1) %>
    bind-process <%= proc %>
    acl private src <%= p("ha_proxy.trusted_stats_cidrs") %>
    http-request deny unless private
    mode http
    stats enable
    stats hide-version
    stats realm "Haproxy Statistics"
    stats uri /<%= p("ha_proxy.stats_uri") %>
    stats auth <%= p("ha_proxy.stats_user") %>:<%= p("ha_proxy.stats_password") %>
  <% end %>
<% end %>

<% if p("ha_proxy.enable_health_check_http") %>
listen health_check_http_url
    bind :8080
    mode http
    monitor-uri /health
    acl http-routers_down nbsrv(http-routers) eq 0
    monitor fail if http-routers_down
<% end %>

<%# HTTP Frontend %>

<%
if_p("ha_proxy.resolvers") do |resolvers|
%>
resolvers default
    hold valid <%= p("ha_proxy.dns_hold") %>
<%
    resolvers.each do |resolver|
%>
    nameserver <%= resolver.keys[0] %> <%= resolver.values[0] %>:53
<%
  end
end
%>


<% unless p("ha_proxy.disable_http") %>
frontend http-in
    mode http
    bind <%= p("ha_proxy.binding_ip") %>:80
    <% if_p("ha_proxy.cidr_whitelist") do %>
    acl whitelist src -f /var/vcap/jobs/haproxy/config/whitelist_cidrs.txt
    tcp-request content accept if whitelist
    <% end %>
    <% if_p("ha_proxy.cidr_blacklist") do %>
    acl blacklist src -f /var/vcap/jobs/haproxy/config/blacklist_cidrs.txt
    tcp-request content reject if blacklist
    <% end %>
    <% if p("ha_proxy.block_all") then %>
    tcp-request content reject
    <% end %>

    capture request header Host len 256
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<%
if_p("ha_proxy.rsp_headers") do |rsp_headers|
  rsp_headers.each do |rsp_header, value|
%>
    rspadd <%= rsp_header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
    acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
    use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ http if ! xfp_exists

<% if p("ha_proxy.https_redirect_all") == true %>
    redirect scheme https code 301 if !{ ssl_fc }
<% end %>
<% unless p("ha_proxy.https_redirect_all") == true %>
    acl ssl_redirect hdr(host),lower,map_end(/var/vcap/jobs/haproxy/config/ssl_redirect.map,false) -m str true
    redirect scheme https code 301 if ssl_redirect
<% end %>

<% end %>

<%# HTTPS Frontend %>

<% if_p("ha_proxy.ssl_pem") do |pem| %>
frontend https-in
    mode http
    <% if p("ha_proxy.accept_proxy") %>
    bind <%= p("ha_proxy.binding_ip") %>:443 accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% else %>
    bind <%= p("ha_proxy.binding_ip") %>:443 ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% end %>
    <% if_p("ha_proxy.cidr_whitelist") do %>
    acl whitelist src -f /var/vcap/jobs/haproxy/config/whitelist_cidrs.txt
    tcp-request content accept if whitelist
    <% end %>
    <% if_p("ha_proxy.cidr_blacklist") do %>
    acl blacklist src -f /var/vcap/jobs/haproxy/config/blacklist_cidrs.txt
    tcp-request content reject if blacklist
    <% end %>
    <% if p("ha_proxy.block_all") then %>
    tcp-request content reject
    <% end %>

    <% if p("ha_proxy.hsts_enable") %>
    http-response set-header Strict-Transport-Security max-age=<%= p("ha_proxy.hsts_max_age").to_i %>;<% if p("ha_proxy.hsts_include_subdomains") %>\ includeSubDomains;<% end %><% if p("ha_proxy.hsts_preload") %>\ preload;<% end %>
    <% end %>
    capture request header Host len 256
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<%
if_p("ha_proxy.rsp_headers") do |rsp_headers|
  rsp_headers.each do |rsp_header, value|
%>
    rspadd <%= rsp_header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ https if ! xfp_exists

<% end %>

<%# HTTPS Websockets Frontend %>

<% if p("ha_proxy.enable_4443") == true %>
frontend wss-in
    mode http
    <% if p("ha_proxy.accept_proxy") %>
    bind <%= p("ha_proxy.binding_ip") %>:4443 accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% else %>
    bind <%= p("ha_proxy.binding_ip") %>:4443 ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% end %>
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>


<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    reqadd X-Forwarded-Proto:\ https

<%# Default Backend %>

<% end %>
backend http-routers
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>

    <%
    backend_servers = []
    backend_port = nil
    if_link("http_backend") do |backend|
        backend_servers = backend.instances.map(&:address)
        backend_port = backend.p("port", p("ha_proxy.backend_port"))
    end.else_if_p("ha_proxy.backend_servers") do |servers|
        backend_servers = servers
        backend_port = p("ha_proxy.backend_port")
    end
    %>

    <% backend_servers.each_with_index do |ip, index| -%>
        server node<%= index %> <%= ip %>:<%= backend_port %> <% if_p("ha_proxy.resolvers") do -%>
        resolvers default <% end -%>
        check inter 1000 <% if p("ha_proxy.backend_ssl").downcase == "verify" then -%>
        ssl verify required ca-file /var/vcap/jobs/haproxy/config/backend-ca-certs.pem <% if_p("ha_proxy.backend_ssl_verifyhost") do | verify_hostname | -%>
        verifyhost <%= verify_hostname %> <% end -%>
        <% elsif p("ha_proxy.backend_ssl").downcase == "noverify" then -%>
        ssl verify none <% end -%>

    <% end %>

<%# Routed Backends %>

<% p('ha_proxy.routed_backend_servers').each do |prefix, data| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
backend http-routed-backend-<%= prefix_hash %>
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>
    <% data["servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= data["port"] %> <% if_p("ha_proxy.resolvers") do -%>
        resolvers default <% end -%>
        check inter 1000 <% if data["backend_ssl"] then -%>
           <% if data["backend_ssl"].downcase == "verify" then -%>
             ssl verify required ca-file /var/vcap/jobs/haproxy/config/backend-ca-certs.pem <% if data["backend_verifyhost"] then -%>
             verifyhost <%= data["backend_verifyhost"] %> <% end -%>
           <% elsif data["backend_ssl"].downcase == "noverify" then -%>
             ssl verify none <% end -%>
        <% end -%>

    <% end -%>
<% end -%>

<%# TCP Backends %>
<%
tcp = p("ha_proxy.tcp")
if_link("tcp_backend") do |tcp_backend|
  tcp << {
    "name" => tcp_backend.instances.first.name || "link",
    "backend_servers" => tcp_backend.instances.map(&:address),
    "port" => tcp_backend.p("port", p("ha_proxy.tcp_link_port")),
    "backend_port" => tcp_backend.p("backend_port", p("ha_proxy.tcp_link_port"))
  }
end %>
<% tcp.each do |tcp_proxy| %>
    frontend tcp-frontend_<%= tcp_proxy["name"]%>
    mode tcp
<% if tcp_proxy["ssl"] %>
    <% if p("ha_proxy.accept_proxy") %>
    bind <%= p("ha_proxy.binding_ip") %>:<%= tcp_proxy["port"] %> accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% else %>
    bind <%= p("ha_proxy.binding_ip") %>:<%= tcp_proxy["port"] %> ssl crt /var/vcap/jobs/haproxy/config/ssl
    <% end %>
<% else %>
    bind <%= p("ha_proxy.binding_ip") %>:<%= tcp_proxy["port"] %>
<% end %>
    default_backend tcp-<%= tcp_proxy["name"] %>

backend tcp-<%= tcp_proxy["name"] %>
    mode tcp
<% if tcp_proxy["balance"] %>
    balance <%= tcp_proxy["balance"] %>
<% end %>

<%
backend_port = tcp_proxy["port"]
if tcp_proxy["backend_port"]
  backend_port = tcp_proxy["backend_port"]
end %>

  <% tcp_proxy["backend_servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= backend_port %> <% if_p("ha_proxy.resolvers") do -%>
        resolvers default <% end -%> check inter 1000  <% if tcp_proxy["backend_ssl"] then -%>
           <% if tcp_proxy["backend_ssl"].downcase == "verify" then -%>
             ssl verify required ca-file /var/vcap/jobs/haproxy/config/backend-ca-certs.pem <% if tcp_proxy["backend_verifyhost"] then -%>
             verifyhost <%= tcp_proxy["backend_verifyhost"] %> <% end -%>
           <% elsif tcp_proxy["backend_ssl"].downcase == "noverify" then -%>
             ssl verify none <% end -%>
        <% end -%>
  <% end -%>

  <% tcp_proxy["backup_servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= backend_port %> <% if_p("ha_proxy.resolvers") do -%>
        resolvers default <% end -%> check inter 1000 backup <% if tcp_proxy["backend_ssl"] then -%>
           <% if tcp_proxy["backend_ssl"].downcase == "verify" then -%>
             ssl verify required ca-file /var/vcap/jobs/haproxy/config/backend-ca-certs.pem <% if tcp_proxy["backend_verifyhost"] then -%>
             verifyhost <%= tcp_proxy["backend_verifyhost"] %> <% end -%>
           <% elsif tcp_proxy["backend_ssl"].downcase == "noverify" then -%>
             ssl verify none <% end -%>
        <% end -%>
  <% end -%>

  <% if tcp_proxy["health_check_http"] then %>
listen health_check_http_tcp-<%= tcp_proxy["name"] %>
    bind :<%= tcp_proxy["health_check_http"] %>
    mode http
    monitor-uri /health
    acl tcp-<%= tcp_proxy["name"] %>-routers_down nbsrv(tcp-<%= tcp_proxy["name"] %>) eq 0
    monitor fail if tcp-<%= tcp_proxy["name"] %>-routers_down
  <% end -%>
<% end -%>
